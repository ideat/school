<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace = "mindware.com.mapper.PaymentsMapper">

    <resultMap type="payments" id="PaymentsResult">
        <id 	property="paymentId" column="payment_id"/>
        <result property="studentId" column="student_id"/>
        <result property="paymentDate" column="payment_date"/>
        <result property="paymentMount" column="payment_mount"/>
        <result property="description" column="description"/>
        <result property="paymentConcept" column="payment_concept"/>
        <result property="paymentType" column="payment_type"/>
        <result property="invoiceNumber" column="invoice_number"/>
        <result property="courseLevel" column="course_level"/>
        <result property="userId" column="user_id"/>
        <result property="fullNameStudent" column="full_name_student"/>
        <result property="paymentPeriod" column="paymentPeriod"/>
    </resultMap>

    <select id="findPaymentsByDates" resultMap="PaymentsResult" parameterType="map">
        select *
        from payments
        where payment_date between #{initDate} and #{endDate}
        order by student_id, payment_date
    </select>

    <select id="findPaymentsGroupedByTypeDateStudent" resultMap="PaymentsResult">
        select p.student_id, p.payment_date, p.payment_type
        , p.full_name_student, p.invoice_number,  sum(p.payment_mount) as payment_mount
        from payments p
        group by 1,2,3,4,5
        order by student_id, payment_date
    </select>

    <select id="findPaymentsByStudentInvoiceDate" resultMap="PaymentsResult" parameterType="map">
        select *
        from payments
        where payment_date = #{paymentDate}
        and student_id = #{studentId}
        and invoice_number = #{invoiceNumber}
        order by payment_id
    </select>

    <select id="findPaymentsByStudentIdAndYear" resultMap="PaymentsResult" parameterType="map">
        select p.*
        from payments p
        inner join student s on (p.student_id = s.student_id)
        inner join class_period c on (c.class_period_id = s.class_period_id)
        where c.year = #{year}
        and s.student_id = #{studentId}
        order by payment_date
    </select>

    <select id="countPaymentsPeriod" resultType="int" parameterType="string">
        select count(*)
        from payments
        where payment_period = #{paymentPeriod}

    </select>

    <insert id="insertPayments"  parameterType="payments" keyProperty="paymentId" >
        <selectKey keyProperty="paymentId" resultType="int" order="BEFORE">
            select nextval('payment_id_seq')
        </selectKey>
        insert into payments (
        payment_id,
        student_id,
        payment_date,
        payment_mount,
        description,
        payment_concept,
        payment_type,
        invoice_number,
        full_name_student,
        course_level,
        user_id,
        payment_period)
        values (
        #{paymentId},
        #{studentId},
        #{paymentDate},
        #{paymentMount},
        #{description},
        #{paymentConcept},
        #{paymentType},
        #{invoiceNumber},
        #{fullNameStudent},
        #{courseLevel},
        #{userId},
        #{paymentPeriod}
        )

    </insert>

    <update id="updatePayments" parameterType="payments">
        update payments
        set
        description = #{description}
        where payment_id = #{paymentId}
    </update>

    <delete id="deletePayments" parameterType="int" >
        delete from payments
        where payment_id = #{paymentId}
    </delete>

</mapper>